[{"name":"app.R","content":"\nlibrary(shiny)\nlibrary(dplyr)\n\n\n# Create the ui and server objects\n\n# Define UI for app that draws a histogram ----\nui <- fluidPage(\n\n  # App title ----\n  titlePanel(\"Scorekeeper\"),\n\n  # Sidebar layout with input and output definitions ----\n  sidebarLayout(position = 'right',\n\n    # Sidebar panel ----\n    \n    sidebarPanel(\n\t  h4(\"Instructions:\"),\n\t  h5('Face off against each opponent. Use this app to record your score after each game. The students with the top scores have a chance at bonus points.')\n    ),\n\n    # Main panel for displaying outputs ----\n    \n    mainPanel(\n\t  \n\t  # Buttons for each play ----\n\t  \n\t  br(),\n\t  \n\t  radioButtons(\"your_move\", \"YOUR move:\",\n\t               c(\"Attack!\" = \"hawk\",\n\t                 \"Retreat\" = \"dove\")),\n\t  \n\t  radioButtons(\"opponent_move\", \"Opponent's move:\",\n\t               c(\"Attack!\" = \"hawk\",\n\t                 \"Retreat\" = \"dove\")),\n\t  \n\t  actionButton(\"run\", label = \"Score\"),\n\n \n\t  # Button to restart ----\n\t  \n    h4(textOutput(outputId = \"corrTestres\", strong)),\n\t  h6(textOutput(outputId = \"ngamesres\", strong)),\n\t  h6(textOutput(outputId = \"avgres\")),\n\t  \n\t  br(),\n\t  br(),\n\t  br(),\n\t  br(),\n\t  br(),\n\t  br(),\n\t  actionButton(\"dotest\", label = \"Refresh/restart at 0\")\n      \n    )\n  )\n)\n\n\n\n\n# Define server logic required to draw a histogram ----\nserver <- function(input, output) {\n\t\n\talldata <- 0\n\t\n\tticker <- 0\n\t\n\tavg <- 0\n\t\n\tngames <<- ticker[1]\n\t\n\tx <<- alldata[1]\n\t\n    output$corrTestres <- renderText({paste('Your score = ', sum(x), sep = '')})\n    output$ngamesres <- renderText({paste(ngames, ' games played', sep = '')})\n    output$avgres <- renderText({paste('')})\n\n  \tobserveEvent(input$run, {\n \n  \t\tx <<- if(input$your_move == 'hawk' & input$opponent_move == 'hawk'){\n  \t\t\tx + 2\n  \t\t} else {\n  \t\t\tif(input$your_move == 'hawk' & input$opponent_move == 'dove'){\n  \t\t\t  x + 10\n  \t\t\t} else {\n  \t\t\t  if(input$your_move == 'dove' & input$opponent_move == 'hawk'){\n  \t\t\t    x + 1\n  \t\t\t  } else {\n  \t\t\t    x + 4\n  \t\t\t  }\n  \t\t\t}\n  \t\t}\n  \t\t\n  \t\tngames <<- ngames + 1\n  \t\tx_avg <<- round(x / ngames, 2)\n    \t\n    \t\toutput$corrTestres <- renderText({paste('Your score = ', sum(x), sep = '')})\n    \t\toutput$ngamesres <- renderText({paste(ngames, ' games played', sep = '')})\n    \t\toutput$avgres <- renderText({paste('Averaging ', x_avg, ' per game', sep = '')})\n    \t})\n    \t\n    observeEvent(input$dotest, {\n\t\t\n      output$corrTestres <- renderText({paste('Your score = ', sum(x), sep = '')})\n      output$ngamesres <- renderText({paste(ngames, ' games played', sep = '')})\n      output$avgres <- renderText({paste('Averaging ', x_avg, ' per game', sep = '')})\n   \t \tx <<- alldata[1] # start again\n   \t \tngames <<- ticker[1]\n   \t \tx_avg <- avg[1]\n\n    })\n    \t\n}\n\n# \n\nshinyApp(ui = ui, server = server) # end with a call to the shinyApp function\n\n\n\n","type":"text"}]
